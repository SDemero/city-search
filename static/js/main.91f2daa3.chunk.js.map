{"version":3,"sources":["img/img1.png","App.js","reportWebVitals.js","index.js"],"names":["OneZipCode","props","className","data","CitySearch","type","id","value","cityValue","onChange","handleChange","placeholder","onClick","handleClick","App","state","city","zipCodes","cityValueChange","bind","activateSearch","event","target","this","setState","console","log","toUpperCase","fetch","then","response","json","jsonResponse","map","zip","idx","catch","e","src","img1","alt","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAAe,MAA0B,iC,MCyFzC,SAASA,EAAWC,GAClB,OACE,qBAAKC,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACE,qBAAKA,UAAU,sBAAf,SACE,qBAAKA,UAAU,cAAf,SACE,qBAAKA,UAAU,aAAf,SACE,0CAAaD,EAAME,kBAWjC,SAASC,EAAWH,GAClB,OACE,gCACE,uBACA,oDAA8B,uBAC9B,uBACAI,KAAK,OACLC,GAAG,OACHJ,UAAU,eACVK,MAAON,EAAMO,UACbC,SAAUR,EAAMS,aAChBC,YAAY,iBAEZ,wBAAQC,QAASX,EAAMY,YAAvB,uBAMSC,M,kDAvHb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,KAAM,GACNC,SAAS,IAGX,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBACvB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBARV,E,4DAaEE,GACd,IAAIL,EAAOK,EAAMC,OAAOf,MACxBgB,KAAKC,SAAS,CACZhB,UAAUQ,IAEZS,QAAQC,IAAI,QAAQV,K,uCAGJ,IAAD,OACXA,EAAOO,KAAKR,MAAMP,UACtBQ,EAAOA,EAAKW,cACZC,MAAM,yCAA2CZ,GAChDa,MAAK,SAACC,GACL,OAAGA,EACMA,EAASC,OAET,MAGVF,MAAK,SAACG,GACLP,QAAQC,IAAI,gBAAgBM,GAC5B,IAAMf,EAAWe,EAAaC,KAAI,SAACC,EAAKC,GACtC,OAAO,8BACN,cAACnC,EAAD,CAAYG,KAAM+B,EAAKlB,KAAMA,GAAWmB,QAG3C,EAAKX,SAAS,CACZP,SAASA,OAGZmB,OAAM,SAACC,GACN,EAAKb,SAAS,CACZP,SAAU,KAEZQ,QAAQC,IAAI,aAAeW,Q,+BAM7B,OACE,sBAAKnC,UAAU,MAAf,UAEE,sBAAKA,UAAU,aAAf,UACE,qBAAKoC,IAAKC,EAAMrC,UAAU,WAAWsC,IAAI,SACzC,2DAKF,cAACpC,EAAD,CACEI,UAAWe,KAAKR,MAAMP,UACtBE,aAAca,KAAKL,gBACnBL,YAAaU,KAAKH,iBAGnBG,KAAKR,MAAMP,UAAa,wCAAWe,KAAKR,MAAMP,aAAgB,wBAE9De,KAAKR,MAAME,SAASwB,OAAS,EAAIlB,KAAKR,MAAME,SAAU,oD,GAxE7CyB,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.91f2daa3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/img1.da84c605.png\";","import React, { Component } from 'react';\nimport img1 from './img/img1.png';\nimport './App.css';\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      city: '',\n      zipCodes:[],\n    }\n    \n    this.cityValueChange = this.cityValueChange.bind(this)\n    this.activateSearch = this.activateSearch.bind(this)\n\n  }\n\n \n  cityValueChange(event) { \n    var city = event.target.value;\n    this.setState({\n      cityValue:city,\n    })\n    console.log('city:',city)\n  }\n\n  activateSearch() {\n    let city = this.state.cityValue;\n    city = city.toUpperCase();\n    fetch('http://ctp-zip-api.herokuapp.com/city/' + city)\n    .then((response) => {\n      if(response) {\n        return response.json();\n      } else {\n        return [];\n      }\n    })\n    .then((jsonResponse) => {\n      console.log('jsonResponse:',jsonResponse)\n      const zipCodes = jsonResponse.map((zip, idx) => {\n        return <div>\n         <OneZipCode data={zip} city={city} key={idx}/>\n        </div>\n      });\n      this.setState({\n        zipCodes:zipCodes,\n      });\n    })\n    .catch((e) => {\n      this.setState({\n        zipCodes: [],\n      });\n      console.log(\"In catch: \" + e)\n    });\n\n  }\n\n  render() {\n    return(\n      <div className=\"App\">\n\n        <div className=\"App-header\">\n          <img src={img1} className=\"App-logo\" alt=\"logo\" />\n          <h2>Welcome To City search</h2>\n        </div>\n\n        {/* 2 adding citysearch component to render and connecting it with trigers/functions */}\n\n        <CitySearch \n          cityValue={this.state.cityValue}\n          handleChange={this.cityValueChange}\n          handleClick={this.activateSearch}\n        />\n        \n        {this.state.cityValue  ? <h3>City: {this.state.cityValue}</h3>:<div></div>}\n\n        {this.state.zipCodes.length > 0 ? this.state.zipCodes: <div>No Results</div>\n            }\n\n\n      </div>\n    )\n  }\n\n\n\n}\nfunction OneZipCode(props) {\n  return (\n    <div className=\"row\">\n      <div className=\"col-xs-12\">\n        <div className=\"panel panel-default\">\n          <div className=\"panel-title\">\n            <div className=\"panel-body\">\n              <p>zipcode: {props.data}</p>\n              \n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n\nfunction CitySearch(props) {\n  return (\n    <div>\n      <br/>\n      <label>Ente City Name:</label><br/>\n      <input \n      type=\"text\"\n      id=\"city\"\n      className=\"form-control\"\n      value={props.cityValue}\n      onChange={props.handleChange}\n      placeholder=\"Try Brooklyn\"\n      />\n      <button onClick={props.handleClick}>\n        Search\n      </button>\n    </div>\n  )\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}